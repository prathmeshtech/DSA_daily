Merge Overlapping Sub-intervals
Problem Statement: Given an array of intervals, merge all the overlapping intervals and return
an array of non-overlapping intervals.

Example 1: 
Input: intervals=[[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]

Solution 1: Brute force

vector < pair < int, int >> merge(vector < pair < int, int >> & arr) {

    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector < pair < int, int >> ans;

    for (int i = 0; i < n; i++) {
        int start = arr[i].first, end = arr[i].second;

        //since the intervals already lies 
        //in the data structure present we continue
        if (!ans.empty()) {
            if (start <= ans.back().second) {
                continue;
            }
        }

        for (int j = i + 1; j < n; j++) {
            if (arr[j].first <= end) {
                end = max(end, arr[j].second);
            }
        }
    
        end = max(end, arr[i].second);

        ans.push_back({start, end});
    }

    return ans;
}

Solution 2: Optimal approach

Approach: Linearly iterate over the array if the data structure is empty insert the interval
 in the data structure. If the last element in the data structure overlaps with the current
 interval we merge the intervals by updating the last element in the data structure, and if
 the current interval does not overlap with the last element in the data structure simply insert
 it into the data structure.

Intuition: Since we have sorted the intervals, the intervals which will be merging are bound
 to be adjacent. We kept on merging simultaneously as we were traversing through the array 
and when the element was non-overlapping we simply inserted the element in our data structure.

vector < vector < int >> merge(vector < vector < int >> & intervals) {

  sort(intervals.begin(), intervals.end());
  vector < vector < int >> merged;

  for (int i = 0; i < intervals.size(); i++) {
    if (merged.empty() || merged.back()[1] < intervals[i][0]) {
      vector < int > v = {
        intervals[i][0],
        intervals[i][1]
      };

      merged.push_back(v);
    } else {
      merged.back()[1] = max(merged.back()[1], intervals[i][1]);
    }
  }

  return merged;
}
