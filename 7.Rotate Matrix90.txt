Rotate Image by 90 degree

Problem Statement: Given a matrix, your task is to rotate the matrix 90 degrees clockwise.

Example 1:
Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Solution 1:Brute force

Approach: Take another dummy matrix of n*n, and then take the first row of the matrix and put
 it in the last column of the dummy matrix, take the second row of the matrix, and put it in
 the second last column of the matrix and so.
 rotated[j][n-i-1] = matrix[i][j]

Solution 2: Optimized approach

Intuition: By observation, we see that the first column of the original matrix is the reverse
 of the first row of the rotated matrix, so thatâ€™s why we transpose the matrix and then reverse
 each row, and since we are making changes in the matrix itself space complexity gets reduced
 to O(1).

void rotate(vector < vector < int >> & matrix) {
  int n = matrix.size();
  //transposing the matrix
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < i; j++) {
      swap(matrix[i][j], matrix[j][i]);
    }
  }
  //reversing each row of the matrix
  for (int i = 0; i < n; i++) {
    reverse(matrix[i].begin(), matrix[i].end());
  }
}