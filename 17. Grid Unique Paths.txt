Grid Unique Paths | Count paths from left-top to the right bottom of a matrix
Problem Statement: Given a matrix m X n, count paths from left-top to the right bottom of a matrix with the constraints that from each cell you can either only move to the rightward direction or the downward direction.

Example 1:
Input Format: m = 2, n= 2
Output: 2

Solution 1:
Approach: The problem states that we can either move rightward or downward direction. So we 
recursively try out all the possible combinations.

 int countPaths(int i,int j,int n,int m)
    {
        if(i==(n-1)&&j==(m-1)) return 1;
        if(i>=n||j>=m) return 0;
        else return countPaths(i+1,j,n,m)+countPaths(i,j+1,n,m);
    }
    int uniquePaths(int m, int n) {
       return countPaths(0,0,m,n);
    }

Solution 2: Dynamic Programming Solution

Intuition: The dynamic programming solution of this problem is a bit extension of the recursive
 solution. In recursive solutions, there are many overlapping subproblems. In this solution 
instead of traversing all the possible paths, whenever we get the result we’ll store it in a 
matrix for future use. Whenever we encounter the same subproblem we directly get the value 
from the matrix instead of recomputing it. By this memorization technique, we can avoid the 
recomputation and the time complexity will be drastically reduced. This is the main intuition
 behind this dynamic programming solution.

 int countPaths(int i,int j,int n,int m,vector<vector<int>> &dp)
    {
        if(i==(n-1)&&j==(m-1)) return 1;
        if(i>=n||j>=m) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
     else return dp[i][j]=countPaths(i+1,j,n,m,dp)+countPaths(i,j+1,n,m,dp);
        
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
       
        //dp[1][1]=1;
       int num=countPaths(0,0,m,n,dp);
        if(m==1&&n==1)
            return num;
        return dp[0][0];
    }

Solution 3: Combinatorics Solution

Intuition: If we observe examples there is a similarity in paths from start to end. Each 
time we are taking an exactly m+n-2 number of steps to reach the end.
From start to reach the end we need a certain number of rightward directions and a certain 
number of downward directions. So we can figure out we need n-1 no. of rightward direction 
and m-1 no. of downward direction to reach the endpoint.

Since we need an m+n-2 number of steps to reach the end among those steps if we choose n-1
 rightward direction or m-1 downward direction and calculate the combinations ( ie: m+n-2Cn-1 or m+n-2Cm-1)
 we’ll get the total number of paths.

Approach: The approach of this solution is very simple just use a for loop to calculate 
the m+n-2Cn-1  or m+n-2Cm-1 

  int uniquePaths(int m, int n) {
            int N = n + m - 2;
            int r = m - 1; 
            double res = 1;
            
            for (int i = 1; i <= r; i++)
                res = res * (N - r + i) / i;
            return (int)res;
    }