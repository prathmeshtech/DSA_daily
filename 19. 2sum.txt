Two Sum : Check if a pair with given sum exists in Array
Problem Statement: Given an array of integers nums[] and an integer target, return indices of
the two numbers such that their sum is equal to the target.

Note: Assume that there is exactly one solution, and you are not allowed to use the same 
element twice. Example: If target is equal to 6 and num[1] = 3, then nums[1] + nums[1] = target
is not a solution.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Solution 1: Naive Approach (Brute Force)

vector<int> twoSum(vector<int>& nums, int target) {
    vector<int> res;
    for (int i = 0; i < nums.size(); ++i) {
   	 for (int j = i + 1; j < nums.size(); ++j) {
   		 if (nums[i] + nums[j] == target) {
   			 res.push_back(i);
   			 res.push_back(j);
   			 break;
   		 }
   	 }
   	 if (res.size() == 2)
   		 break;
    }
    return res;
} 
-------------------------------------------------------------------------------------------------
Solution 2: Two-Pointer Approach

Intuition: Think about, what if the array is sorted? If the array is sorted, is it possible 
to reach a sum by traversing the array from both sides simultaneously?
Time Complexity: O(NlogN)
-----------------------------------------------------------------------------------------------------
Solution 3: Hashing (Most efficient)
vector<int> twoSum(vector<int>& nums, int target) {

    vector<int> res;
    unordered_map<int, int> mp;

    for (int i = 0; i < nums.size(); ++i) {

   	 if (mp.find(target - nums[i]) != mp.end()) {

   		 res.push_back(i);
   		 res.push_back(mp[target - nums[i]]);
   		 return res;
   	 }

   	 mp[nums[i]] = i;
    }

    return res;
}