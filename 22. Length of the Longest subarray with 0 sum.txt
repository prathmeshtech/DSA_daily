Length of the longest subarray with zero Sum
Problem Statement: Given an array containing both positive and negative integers, we have to
 find the length of the longest subarray with the sum of all elements equal to zero.

Example 1:
Input Format: N = 6, array[] = {9, -3, 3, -1, 6, -5}
Result: 5

Solution 1 (Naive approach) :
Intuition:
We are required to find the longest subarray that sums to zero. So our initial approach could
 be to consider all possible subarrays of the given array and check for the subarrays that 
sum to zero. Among these valid subarrays (a sum equal to zero) weâ€™ll return the length of 
the largest subarray by maintaining a variable, say max.   

int solve(int[] a){
	int  max = 0;
	for(int i = 0; i < a.length; ++i){
		int sum = 0;
		for(int j = i; j < a.length; ++j){
			sum += a[j];
			if(sum == 0){
				max = Math.max(max, j-i+1);
			}
		}
	}
	return max;
   }

Solution 2 (Optimised Approach) :
Approach: 
First let us initialise a variable say sum = 0 which stores the sum of elements traversed so 
far and another variable say max = 0 which stores the length of longest subarray with sum 
zero.
Declare a HashMap<Integer, Integer> which stores the prefix sum of every element as key and
 its index as value.
Now traverse the array, and add the array element to our sum. 

int maxLen(int A[], int n)
{
    // Your code here
    unordered_map<int,int> mpp; 
    int maxi = 0;
    int sum = 0; 
    for(int i = 0;i<n;i++) {
        sum += A[i]; 
        if(sum == 0) {
            maxi = i + 1; 
        }
        else {
            if(mpp.find(sum) != mpp.end()) {
                maxi = max(maxi, i - mpp[sum]); 
            }
            else {
                mpp[sum] = i;
            }
        }   
    }

    return maxi; 
}